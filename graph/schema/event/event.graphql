type Event{
    id: ID!
    name: String!
    startDate: String!
    location:String!
    description: String
    endDate: String!
    createdBy: User!
}

type EventResponse {
  id: Int
}

input EventInput {
  name: String! @goTag(key: "validate", value: "required")
  startDate: String! @goTag(key: "validate", value: "required")
  description: String 
  endDate: String! @goTag(key: "validate", value: "required")
  location: String! @goTag(key: "validate", value: "required")
}

input ScheduleUpdateInput{
  startDate: String! @goTag(key: "validate", value: "required")
  endDate: String! @goTag(key: "validate", value: "required")

}

input MemberInput{
  id:String! @goTag(key: "validate", value: "required")
  role:String! @goTag(key: "validate", value: "required")
}

input AddMemberInput{
  members:[MemberInput]!
}

type Response{
  success:Boolean!
  message:String!
}

type Query {
  events: [Event!]!
  event(id: ID!): Event!
  getMembersOfEvent(id:ID!):[Member!]!
}

type Mutation {
  createEvent(data: EventInput!): EventResponse!
  addMembersToEvent(id:ID!,data: AddMemberInput!): String!
  removeMemberFromEvent(id:ID!,memberId:String!): Response!
  deleteEvent(id: ID!): Response!
  updateEvent(id: ID!, data: EventInput!): EventResponse!
  updateSchedule(id: ID!, data: ScheduleUpdateInput!): Response!
}