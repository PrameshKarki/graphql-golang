package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"context"
	"fmt"

	"github.com/PrameshKarki/event-management-golang/graph"
	"github.com/PrameshKarki/event-management-golang/graph/model"
	eventService "github.com/PrameshKarki/event-management-golang/graph/services/event"
	userEventService "github.com/PrameshKarki/event-management-golang/graph/services/userEvents"
)

// CreateEvent is the resolver for the createEvent field.
func (r *mutationResolver) CreateEvent(ctx context.Context, data model.EventInput) (*model.EventResponse, error) {
	id, err := eventService.CreateEvent(data, "1")
	// Assign user to admin role
	userEventService.CreateUserEvent(fmt.Sprint(id), "1", "ADMIN")
	return &model.EventResponse{ID: &id}, err
}

// DeleteEvent is the resolver for the deleteEvent field.
func (r *mutationResolver) DeleteEvent(ctx context.Context, id string) (*model.EventResponse, error) {
	eventId, err := eventService.DeleteEvent(id)
	return &model.EventResponse{ID: &eventId}, err
}

// UpdateEvent is the resolver for the updateEvent field.
func (r *mutationResolver) UpdateEvent(ctx context.Context, id string, data model.EventInput) (*model.EventResponse, error) {
	eventId, err := eventService.UpdateEvent(id, data)
	return &model.EventResponse{ID: &eventId}, err
}

// Events is the resolver for the events field.
func (r *queryResolver) Events(ctx context.Context) ([]*model.Event, error) {
	return eventService.GetEvents()
}

// Event is the resolver for the event field.
func (r *queryResolver) Event(ctx context.Context, id string) (*model.Event, error) {
	return eventService.GetEvent(id)
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
