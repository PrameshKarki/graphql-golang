// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type AddMemberInput struct {
	Members []*MemberInput `json:"members"`
}

type AuthSchema struct {
	AccessToken string `json:"accessToken"`
	ID          string `json:"id"`
	Email       string `json:"email"`
}

type Event struct {
	ID          string  `json:"id"`
	Name        string  `json:"name"`
	StartDate   string  `json:"startDate"`
	Location    string  `json:"location"`
	Description *string `json:"description,omitempty"`
	EndDate     string  `json:"endDate"`
	CreatedBy   *User   `json:"createdBy"`
}

type EventInput struct {
	Name        string  `json:"name"`
	StartDate   string  `json:"startDate"`
	Description *string `json:"description,omitempty"`
	EndDate     string  `json:"endDate"`
	Location    string  `json:"location"`
}

type EventResponse struct {
	ID *int `json:"id,omitempty"`
}

type Expense struct {
	ID          string  `json:"id"`
	ItemName    string  `json:"itemName"`
	Cost        float64 `json:"cost"`
	Description *string `json:"description,omitempty"`
	Category    string  `json:"category"`
}

type ExpenseInput struct {
	ItemName    string  `json:"itemName"`
	Cost        float64 `json:"cost"`
	Description *string `json:"description,omitempty"`
	Category    string  `json:"category"`
}

type ExpenseWithEvent struct {
	ID          string  `json:"id"`
	ItemName    string  `json:"itemName"`
	Cost        float64 `json:"cost"`
	Description *string `json:"description,omitempty"`
	Category    string  `json:"category"`
	Event       *Event  `json:"event"`
}

type ExpensesByCategory struct {
	Category string  `json:"category"`
	Total    float64 `json:"total"`
}

type LoginInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type Member struct {
	ID          string `json:"id"`
	Name        string `json:"name"`
	Email       string `json:"email"`
	PhoneNumber string `json:"phoneNumber"`
	Role        string `json:"role"`
}

type MemberInput struct {
	ID   string `json:"id"`
	Role string `json:"role"`
}

type Response struct {
	Success bool   `json:"success"`
	Message string `json:"message"`
}

type ScheduleUpdateInput struct {
	StartDate string `json:"startDate"`
	EndDate   string `json:"endDate"`
}

type Session struct {
	ID          string  `json:"id"`
	Name        string  `json:"name"`
	StartTime   string  `json:"startTime"`
	EndTime     string  `json:"endTime"`
	Description *string `json:"description,omitempty"`
}

type SessionInput struct {
	Name        string  `json:"name"`
	StartTime   string  `json:"startTime"`
	EndTime     string  `json:"endTime"`
	Description *string `json:"description,omitempty"`
}

type User struct {
	ID          string `json:"id"`
	Name        string `json:"name"`
	Email       string `json:"email"`
	PhoneNumber string `json:"phoneNumber"`
	Password    string `json:"password"`
}

type UserInput struct {
	Name        string `json:"name"`
	Email       string `json:"email"`
	PhoneNumber string `json:"phoneNumber"`
	Password    string `json:"password"`
}

type UserResponse struct {
	ID *int `json:"id,omitempty"`
}

type Role string

const (
	RoleAdmin Role = "ADMIN"
	RoleUser  Role = "USER"
)

var AllRole = []Role{
	RoleAdmin,
	RoleUser,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleUser:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
